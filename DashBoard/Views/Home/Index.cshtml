    @{
    ViewBag.Title = "Index";
}
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>

<script src="@Url.Content("~/Scripts/jquery-ui-1.10.4.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/Hightchart/NuevaVersion/highcharts.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/Hightchart/highcharts-more.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/Hightchart/exporting.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/numeral.min.js")" type="text/javascript"></script>
<link href="@Url.Content("~/Content/bootstrap.min.css")" rel="stylesheet" type="text/css"/>
<link href="@Url.Content("~/Content/jquery.jqGrid/ui.jqgrid-bootstrap-ui.css")" rel="stylesheet" type="text/css" />  
<link href="@Url.Content("~/Content/themes/base/jquery-ui.css")" rel="stylesheet" type="text/css" />    
<link href="@Url.Content("~/Content/jquery.jqGrid/ui.jqgrid.css")" rel="stylesheet" type="text/css" />  


  <link rel="stylesheet" href="@Url.Content("~/Content/BootstrapMins/bootstrap.min.css")" >
  
  <script src="@Url.Content("~/Content/BootstrapMins/bootstrap1.min.js")"></script>
<script type="text/javascript">
    var lista, listanoa, listafollowup;
    var validNavigation = false;
    function endSession() {
        $.get( '@Url.Action("Conexion", "Login")');
    }

    function wireUpEvents() {

        /*
        * For a list of events that triggers onbeforeunload on IE
        * check http://msdn.microsoft.com/en-us/library/ms536907(VS.85).aspx
        */
        window.onbeforeunload = function () {
            if (!validNavigation) {
                endSession();
            }
        }

        // Attach the event click for all links in the page
        $("a").bind("click", function () {
            validNavigation = true;
        });

        // Attach the event submit for all forms in the page
        $("form").bind("submit", function () {
            validNavigation = true;
        });

    }
    $(document).ready(function () {
        //        window.addEventListener("beforeunload", function (e) {
        //            debugger;
        //            if (e.event.clientY < 0) {
        //                alert("close");
        //            }
        //            $.ajax({
        //                type: "GET",
        //                async: false,
        //                url: '@Url.Action("GoExit", "Login")',
        //                dataType: 'json',
        //                contentType: false,
        //                processData: false,


        //                success: function (response) {

        //                },
        //                error: function (response) {
        //                    alert(response);
        //                }

        //            });
        //            window.onbeforeunload = null;

        //        });
        wireUpEvents();  
        $("#configuracion").click(function () {
            $("#myModal").modal();
        });
        $.ajax({
            type: "GET",
            url: '@Url.Action("ObtainListResult", "Forecast")',
            dataType: 'json',
            contentType: false,
            processData: false,


            success: function (response) {
                graphicforecasted(response.data.Forecast, response.data.Client, response.data.TotalClient, response.data.TotalForecast);
            },
            error: function (response) {
                alert(response);
            }

        });
        $.ajax({
            type: "GET",
            url: '@Url.Action("ObtainListResult", "Invoiced")',
            dataType: 'json',
            async: false,
            success: function (response) {
                lista = response.listadouble;
                listanoa = response.listanoa;
                listafollowup = response.listafollowup;
                graphic(lista, response.total);
                graphic2(listanoa);
                graphic3(listafollowup);
            },
            error: function (response) {
                alert(response);
            }

        });


        $.ajax({
            type: "GET",
            url: '@Url.Action("ObtainListResultGoogle", "ContractRenewals")',
            dataType: 'json',
            contentType: false,
            processData: false,
            async: false,
            success: function (response) {
                graphiccontractsrewals(response.data);
                graphicpendingrenewals(response.pending);
                
                //graphicpending2renewals(response.pending2);
            },
            error: function (response) {
                alert("error");
            }

        });


    });


    $(window).resize(function () {
        $(Highcharts.charts).each(function (i, chart) {
            var height = chart.renderTo.clientHeight;
            var width = chart.renderTo.clientWidth;
            chart.setSize(width, height);
        });
    });

    function graphic(lista, total) {
        $('#total').append('Total Invoiced to date ' + total);
        $('#invoiced').highcharts({
            legend: {
                enabled: false
            },
            chart: {
                borderColor: '#000000',
                borderWidth: 2,
                type: 'line',
                backgroundColor: {
                    linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },
                    stops: [
                       [0, '#2a2a2b'],
                       [1, '#2a2a2b']
                    ]
                },
                padding: 20,
                height: 280,
                width: 300,
                renderTo: 'containerInvoiced',
                type: 'line'
            },
            exporting: { enabled: false,
                buttons: {
                    contextButton: {
                        menuItems: [{
                            textKey: 'downloadPNG',
                            onclick: function () {
                                this.exportChart();
                            }
                        }, {
                            textKey: 'downloadJPEG',
                            onclick: function () {
                                this.exportChart({
                                    type: 'image/jpeg'
                                });
                            }
                        }]
                    }
                }
            },
            tooltip: {
                formatter: function () {
                    return "$" + this.y.toFixed(3).toString().replace('.', ',') + ' ' + this.x;
                }
            },
            credits: {
                enabled: false
            },
            lang: {
                thousandsSep: ',',
                decimalPoint: ','
            },
            title: {
                text: 'Invoiced (#)',
                style: {
                    fontFamily: 'Helvetica',
                    color: '#ffffff',
                    textTransform: 'uppercase',
                    fontSize: '15px'
                }

            },
            subtitle: {
                text: ''
            },
            xAxis: {
                categories: ['Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']
            },
            yAxis: {
                title: {
                    text: ''
                }
            },
            plotOptions: {
                line: {
                    dataLabels: {
                        enabled: true

                    },
                    enableMouseTracking: true
                }
            },
            series: [
                {
                    name: ' ',
                    data: lista,
                    dataLabels: {
                        enabled: true,
                        color: 'white',
                        align: 'right',
                        format: '{point.y:.0f}', // one decimal
                        style: {
                            fontSize: '10px',
                            fontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif;'
                        }
                    }

                }
            ]
        });
    };

    function graphic2(lista) {
        $('#containernoa').highcharts({
            legend: {
                enabled: false
            },
            chart: {
                borderColor: '#000000',
                borderWidth: 2,
                type: 'line',
                backgroundColor: {
                    linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },
                    stops: [
                       [0, '#2a2a2b'],
                       [1, '#2a2a2b']
                    ]
                },

                renderTo: 'containerWaiting',
                height: 280,
                width: 300,
                type: 'line'

            },
            exporting: {
                enabled: false,
                buttons: {
                    contextButton: {
                        menuItems: [{
                            textKey: 'downloadPNG',
                            onclick: function () {
                                this.exportChart();
                            }
                        }, {
                            textKey: 'downloadJPEG',
                            onclick: function () {
                                this.exportChart({
                                    type: 'image/jpeg'
                                });
                            }
                        }]
                    }
                }
            },
            credits: {
                enabled: false
            },
            lang: {
                thousandsSep: ','
            },
            yAxis: {
                // Primary yAxis
                labels: {
                    formatter: function () {
                        return numeral(this.value).format('0,0');
                    }
                }
            },
            tooltip: {
                formatter: function () {
                    return "$" + numeral(this.y).format('0,0') + ' ' + this.x;
                }
            },
            title: {
                text: 'Waiting invoiced (#)',
                style: {
                    fontFamily: 'Helvetica',
                    color: '#ffffff',
                    textTransform: 'uppercase',
                    fontSize: '15px'
                }

            },
            subtitle: {
                text: ''
            },
            xAxis: {
                categories: ['Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']
            },
            plotOptions: {
                line: {
                    dataLabels: {
                        enabled: true

                    },
                    enableMouseTracking: true
                }
            },
            series: [
                {
                    name: ' ',
                    data: lista,
                    dataLabels: {
                        enabled: true,
                        color: 'white',
                        align: 'right',
                        format: '{point.y:.0f}', // one decimal
                        style: {
                            fontSize: '10px',
                            fontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif;'
                        }
                    }

                }
            ]
        });
    };

    function graphic3(lista) {
        $('#followup').highcharts({
            legend: {
                enabled: false
            },

            chart: {
                borderColor: '#000000',
                borderWidth: 2,
                type: 'line',
                backgroundColor: {
                    linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },
                    stops: [
                       [0, '#2a2a2b'],
                       [1, '#2a2a2b']
                    ]
                },

                renderTo: 'containerOfClaims',
                height: 280,
                width: 300,
                type: 'column'
            },

            exporting: {
                enabled: false,
                buttons: {
                    contextButton: {
                        menuItems: [{
                            textKey: 'downloadPNG',
                            onclick: function () {
                                this.exportChart();
                            }
                        }, {
                            textKey: 'downloadJPEG',
                            onclick: function () {
                                this.exportChart({
                                    type: 'image/jpeg'
                                });
                            }
                        }]
                    }
                }
            },

            credits: {
                enabled: false
            },
            title: {
                text: 'Pending Noa (#)',
                style: {
                    fontFamily: 'Helvetica',
                    color: '#ffffff',
                    textTransform: 'uppercase',
                    fontSize: '15px'
                }
            },
            xAxis: {
                categories: [
                    'Jul',
                    'Aug',
                    'Sep',
                    'Oct',
                    'Nov',
                    'Dec',
                    'Jan',
                    'Feb',
                    'Mar',
                    'Apr',
                    'May',
                    'Jun'
                ],
                crosshair: true
            },
            yAxis: {
                min: 0,
                title: {
                    text: ''
                }
            },
            tooltip: {
                headerFormat: '<span style="font-size:10px">{point.y}</span><table>',
                pointFormat: '',
                footerFormat: '</table>',
                shared: true,
                useHTML: true
            },
            plotOptions: {
                column: {
                    pointPadding: 0.2,
                    borderWidth: 0
                }
            },
            series: [
                {
                    name: ' ',
                    data: lista,
                    dataLabels: {
                        enabled: true,
                        color: 'white',
                        align: 'right',
                        format: '{point.y:.0f}', // one decimal
                        style: {
                            fontSize: '10px',
                            fontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif;'
                        }
                    }

                }
            ]
        });
    }

    function graphiccontractsrewals(lista) {
        $('#contractsrewals').highcharts({
            legend: {
                enabled: false
            },

            chart: {
                borderColor: '#000000',
                borderWidth: 2,
                type: 'line',
                backgroundColor: {
                    linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },
                    stops: [
                       [0, '#2a2a2b'],
                       [1, '#2a2a2b']
                    ]
                },


                renderTo: 'containerContractsRenewals',
                height: 280,
                width: 300,
                type: 'column'
            },

            exporting: {
                enabled: false,
                buttons: {
                    contextButton: {
                        menuItems: [{
                            textKey: 'downloadPNG',
                            onclick: function () {
                                this.exportChart();
                            }
                        }, {
                            textKey: 'downloadJPEG',
                            onclick: function () {
                                this.exportChart({
                                    type: 'image/jpeg'
                                });
                            }
                        }]
                    }
                }
            },

            credits: {
                enabled: false
            },
            title: {
                text: 'Renewed contracts (#)',
                style: {
                    fontFamily: 'Helvetica',
                    color: '#ffffff',
                    textTransform: 'uppercase',
                    fontSize: '15px'
                }
                //x: 10,
            },
            xAxis: {
                categories: [
                    'Jul',
                    'Aug',
                    'Sep',
                    'Oct',
                    'Nov',
                    'Dec',
                    'Jan',
                    'Feb',
                    'Mar',
                    'Apr',
                    'May',
                    'Jun'
                ],
                crosshair: true
            },
            yAxis: {
                min: 0,
                title: {
                    text: ''
                }
            },
            tooltip: {
                headerFormat: '<span style="font-size:10px">{point.y}</span><table>',
                pointFormat: '',
                footerFormat: '</table>',
                shared: true,
                useHTML: true
            },
            plotOptions: {
                column: {
                    pointPadding: 0.2,
                    borderWidth: 0
                }
            },
            series: [
                {
                    name: ' ',
                    data: lista,
                    dataLabels: {
                        enabled: true,
                        color: 'white',
                        align: 'right',
                        format: '{point.y:.0f}', // one decimal
                        style: {
                            fontSize: '10px',
                            fontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif;'
                        }
                    }

                }
            ]
        });
    }

    function graphicpendingrenewals(lista) {
        $('#pendingrenewals').highcharts({
            legend: {
                enabled: false
            },
            chart: {
                borderColor: '#000000',
                borderWidth: 2,
                type: 'line',
                backgroundColor: {
                    linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },
                    stops: [
                       [0, '#2a2a2b'],
                       [1, '#2a2a2b']
                    ]
                },

                renderTo: 'containerPendingRenewals',
                height: 280,
                width: 300,
                type: 'column'
            },

            exporting: {
                enabled: false,
                buttons: {
                    contextButton: {
                        menuItems: [{
                            textKey: 'downloadPNG',
                            onclick: function () {
                                this.exportChart();
                            }
                        }, {
                            textKey: 'downloadJPEG',
                            onclick: function () {
                                this.exportChart({
                                    type: 'image/jpeg'
                                });
                            }
                        }]
                    }
                }
            },

            credits: {
                enabled: false
            },
            title: {
                text: 'Pending Renewals (#)',
                style: {
                    fontFamily: 'Helvetica',
                    color: '#ffffff',
                    textTransform: 'uppercase',
                    fontSize: '15px'
                }
            },
            xAxis: {
                categories: [
                    'Jul',
                    'Aug',
                    'Sep',
                    'Oct',
                    'Nov',
                    'Dec',
                    'Jan',
                    'Feb',
                    'Mar',
                    'Apr',
                    'May',
                    'Jun'
                ],
                crosshair: true
            },
            yAxis: {
                min: 0,
                title: {
                    text: ''
                }
            },
            tooltip: {
                headerFormat: '<span style="font-size:10px">{point.y}</span><table>',
                pointFormat: '',
                footerFormat: '</table>',
                shared: true,
                useHTML: true
            },
            plotOptions: {
                column: {
                    pointPadding: 0.2,
                    borderWidth: 0
                }
            },
            series: [
                {
                    name: ' ',
                    data: lista,
                    dataLabels: {
                        enabled: true,
                        color: 'white',
                        align: 'right',
                        format: '{point.y:.0f}', // one decimal
                        style: {
                            fontSize: '10px',
                            fontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif;'
                        }
                    }

                }
            ]
        });
    }
    function graphicpending2renewals(lista) {
        $('#pending2renewals').highcharts({
            legend: {
                enabled: false
            },

            chart: {
                borderColor: '#000000',
                borderWidth: 2,
                type: 'line',
                backgroundColor: {
                    linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },
                    stops: [
                       [0, '#2a2a2b'],
                       [1, '#2a2a2b']
                    ]
                },

                renderTo: 'containerPending2Renewals',
                height: 280,
                width: 300,
                type: 'column'
            },

            exporting: {
                enabled: false,
                buttons: {
                    contextButton: {
                        menuItems: [{
                            textKey: 'downloadPNG',
                            onclick: function () {
                                this.exportChart();
                            }
                        }, {
                            textKey: 'downloadJPEG',
                            onclick: function () {
                                this.exportChart({
                                    type: 'image/jpeg'
                                });
                            }
                        }]
                    }
                }
            },

            credits: {
                enabled: false
            },
            title: {
                text: 'Testing (#)',
                style: {
                    fontFamily: 'Helvetica',
                    color: '#ffffff',
                    textTransform: 'uppercase',
                    fontSize: '15px'
                }



            },
            xAxis: {
                categories: [
                    'Jul',
                    'Aug',
                    'Sep',
                    'Oct',
                    'Nov',
                    'Dec',
                    'Jan',
                    'Feb',
                    'Mar',
                    'Apr',
                    'May',
                    'Jun'
                ],
                crosshair: true
            },
            yAxis: {
                min: 0,
                title: {
                    text: ''
                }
            },
            tooltip: {
                headerFormat: '<span style="font-size:10px">{point.y}</span><table>',
                pointFormat: '',
                footerFormat: '</table>',
                shared: true,
                useHTML: true
            },
            plotOptions: {
                column: {
                    pointPadding: 0.2,
                    borderWidth: 0
                }
            },
            series: [
                {
                    name: ' ',
                    data: lista,
                    dataLabels: {
                        enabled: true,
                        color: 'white',
                        align: 'right',
                        format: '{point.y:.0f}', // one decimal
                        style: {
                            fontSize: '10px',
                            fontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif;'
                        }
                    }

                }
            ]
        });
    }
    function graphicforecasted(forecast, client, totalclient, totalforecast) {
        var total = parseInt(totalforecast);
        var tabla = "<table class='table table-striped' style='background-color: red'><thead><tr><th></th><th>Forecasted</th><th>Filed</th></tr></thead><tbody>" +
            "<tr><td>Claim Value ($)</td><td>" + numeral(totalforecast).format('$0,0') + "</td><td>" + numeral(forecast).format('$0,0') + "</td></tr>" +
            "<tr><td>Claims (#)</td><td>" + totalclient + "</td><td>" + client + "</td></tr>" +
            "</tbody></table>";
        $('#tabl').append(tabla);

        Highcharts.chart('graphic', {

            chart: {
                borderColor: '#000000',
                borderWidth: 2,
                type: 'line',
                backgroundColor: {
                    linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },
                    stops: [
                       [0, '#2a2a2b'],
                       [1, '#2a2a2b']
                    ]
                },

                type: 'gauge',
                height: 280,
                width: 300,
                plotBackgroundColor: null,
                plotBackgroundImage: null,
                plotBorderWidth: 0,
                plotShadow: false
            },

            exporting: {
                enabled: false,
                buttons: {
                    contextButton: {
                        menuItems: [{
                            textKey: 'downloadPNG',
                            onclick: function () {
                                this.exportChart();
                            }
                        }, {
                            textKey: 'downloadJPEG',
                            onclick: function () {
                                this.exportChart({
                                    type: 'image/jpeg'
                                });
                            }
                        }]
                    }
                }
            },

            credits: {
                enabled: false
            },
            title: {
                text: 'Submitted Claims (#)',
                style: {
                    fontFamily: 'Helvetica',
                    color: '#ffffff',
                    textTransform: 'uppercase',
                    fontSize: '15px'
                }

            },

            pane: {
                startAngle: -150,
                endAngle: 150,
                background: [{
                    backgroundColor: {
                        linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },
                        stops: [
                    [0, 'rgb(43,65,103)'],
                    [1, 'rgb(43,65,103)']
                ]
                    },
                    borderWidth: 0,
                    outerRadius: '109%'
                }, {
                    backgroundColor: {
                        linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },
                        stops: [
                    [0, 'rgb(43,65,103)'],
                    [1, 'rgb(43,65,103)']
                ]
                    },
                    borderWidth: 1,
                    outerRadius: '107%'
                }, {
                    // default background
                }, {
                    backgroundColor: '#DDD',
                    borderWidth: 0,
                    outerRadius: '105%',
                    innerRadius: '103%'
                }]
            },
            plotOptions: {
                gauge: {
                    pivot: {
                        radius: 10,
                        borderWidth: 1,
                        borderColor: 'gray',
                        backgroundColor: {
                            linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },
                            stops: [
                                [0, 'white'],
                                [1, 'gray']
                            ]
                        }
                    }
                }
            },
            // the value axis
            yAxis: {
                min: 0,
                max: 40,

                minorTickInterval: 'auto',
                minorTickWidth: 1,
                minorTickLength: 10,
                minorTickPosition: 'inside',
                minorTickColor: '#666',

                tickPixelInterval: 30,
                tickWidth: 2,
                tickPosition: 'inside',
                tickLength: 10,
                tickColor: '#666',
                labels: {
                    step: 2,
                    rotation: 'auto'
                },

                title: {
                    text: 'Submitted Claims(#)',
                    style: {

                        color: '#ffffff',
                        fontSize: '10px'
                    }
                },

                plotBands: [{
                    from: 0,
                    to: 120,
                    color: '#55BF3B' // green
                }, {
                    from: 120,
                    to: 160,
                    color: '#DDDF0D' // yellow
                }, {
                    from: 160,
                    to: 200,
                    color: '#DF5353' // red
                }]
            },

            series: [{
                name: '# of Submitted Claims',
                data: [client],
                tooltip: {
                    valueSuffix: ' '
                }

            }]

        },
        // Add some life
function (chart) {

});


        Highcharts.chart('forecasted', {



            chart: {
                borderColor: '#000000',
                borderWidth: 2,
                type: 'line',
                backgroundColor: {
                    linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },
                    stops: [
                       [0, '#2a2a2b'],
                       [1, '#2a2a2b']
                    ]
                },

                type: 'gauge',
                height: 280,
                width: 300,
                plotBackgroundColor: null,
                plotBackgroundImage: null,
                plotBorderWidth: 0,
                plotShadow: false

            },

            exporting: {
                enabled: false,
                buttons: {
                    contextButton: {
                        menuItems: [{
                            textKey: 'downloadPNG',
                            onclick: function () {
                                this.exportChart();
                            }
                        }, {
                            textKey: 'downloadJPEG',
                            onclick: function () {
                                this.exportChart({
                                    type: 'image/jpeg'
                                });
                            }
                        }]
                    }
                }
            },

            credits: {
                enabled: false
            },
            title: {
                text: 'Claim Value ($)',
                style: {
                    fontFamily: 'Helvetica',
                    color: '#ffffff',
                    textTransform: 'uppercase',
                    fontSize: '15px'
                }
            },

            pane: {
                startAngle: -150,
                endAngle: 150,
                background: [{
                    backgroundColor: {
                        linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },
                        stops: [
                    [0, 'rgb(43,65,103)'],
                    [1, 'rgb(43,65,103)']
                ]
                    },
                    borderWidth: 0,
                    outerRadius: '109%'
                }, {
                    backgroundColor: {
                        linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },
                        stops: [
                    [0, 'rgb(43,65,103)'],
                    [1, 'rgb(43,65,103)']
                ]
                    },
                    borderWidth: 1,
                    outerRadius: '107%'
                }, {
                    // default background
                }, {
                    backgroundColor: '#DDD',
                    borderWidth: 0,
                    outerRadius: '105%',
                    innerRadius: '103%'
                }]
            },
            plotOptions: {
                gauge: {
                    pivot: {
                        radius: 10,
                        borderWidth: 1,
                        borderColor: 'gray',
                        backgroundColor: {
                            linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },
                            stops: [
                                [0, 'white'],
                                [1, 'gray']
                            ]
                        }
                    }
                }
            },
            // the value axis
            yAxis: {

                min: 0,
                max: 8000000,

                minorTickInterval: 'auto',
                minorTickWidth: 1,
                minorTickLength: 10,
                minorTickPosition: 'inside',
                minorTickColor: '#666',

                tickPixelInterval: 30,
                tickWidth: 2,
                tickPosition: 'inside',
                tickLength: 10,
                tickColor: '#666',
                labels: {
                    step: 2,
                    rotation: 'auto'

                },
                labels: {

                    formatter: function () {
                        //  return Math.round(this.value / 1000000) + 'M';
                        // return Highcharts.numberFormat(this.y, 0);
                        if (this.value == '1000000' || this.value == '2000000' || this.value == '3000000' || this.value == '4000000' || this.value == '5000000' || this.value == '6000000' || this.value == '7000000' || this.value == '8000000')
                            return this.value / 1000000 + '.0 MM';
                    }

                },
                title: {
                    text: 'Millions',
                    style: {

                        color: '#ffffff',
                        fontSize: '10px'
                    }
                },
                plotBands: [{
                    from: 0,
                    to: 3000000,
                    color: '#55BF3B' // green
                }, {
                    from: 3000000,
                    to: 6000000,
                    color: '#DDDF0D' // yellow
                }, {
                    from: 6000000,
                    to: 8000000,
                    color: '#DF5353' // red
                }]

            },

            series: [{


                name: 'Claim Value ($)',
                data: [3952707],
                color: '#ffffff',
                tooltip: {
                    valueSuffix: ' Millons'
                }

            }]



        },
        // Add some life
function (chart) {
    if (!chart.renderer.forExport) {

    }


});

    }

    Highcharts.setOptions({
        lang: {
            thousandsSep: ',',
            decimalPoint: ','
        }
    });

    $(function () {
        // Initialize numeric spinner input boxes
        //$(".numeric-spinner").spinedit();

        // Initalize modal dialog
        // attach modal-container bootstrap attributes to links with .modal-link class.
        // when a link is clicked with these attributes, bootstrap will display the href content in a modal dialog.
        $('body').on('click', '.modal-link', function (e) {
            e.preventDefault();
            $(this).attr('data-target', '#modal-container');
            $(this).attr('data-toggle', 'modal');
        });

        // Attach listener to .modal-close-btn's so that when the button is pressed the modal dialog disappears
        $('body').on('click', '.modal-close-btn', function () {
            $('#modal-container').modal('hide');
        });

        //clear modal cache, so that new content can be loaded
        $('#modal-container').on('hidden.bs.modal', function () {
            $(this).removeData('bs.modal');
        });

        $('#CancelModal').on('click', function () {
            return false;
        });
    });

    function abrir() {
        $("#modal").dialog({
            autoOpen: true,
            width: 1000,
            resizable: false,
            title: '',
            open: function () {
                $(this).load('@Url.Action("Grid", "ContractRenewals")');
            }
        });
    }

    function abrirPending() {
        $("#modal").dialog({
            autoOpen: true,
            width: 1000,
            resizable: false,
            title: '',
            open: function () {
                $(this).load('@Url.Action("GridPending", "ContractRenewals")');
            }
        });
    }
</script>

<div style="margin: 0px; padding: 10px 40px; background: #000000;">

    <div style="background: #181515;">

        <div style="background: #181515;">



        </div>



        <div style="margin-left: 10px; padding: 10px 20px;">

            <div class="row"; style="margin-left: 10px; margin-top: 15px; background: #000000; padding: 10px 20px 10px; border: 1px solid white">




                <div class="col-sm-2" style="border-right: thick solid #ff0000; margin-top: 100px;">
                    <h2 class="text-white">CLAIMS</h2>
                </div>

                <div id="forecasted" class="col-sm-3 col-lg-3 col-xs-3"></div>

                <div id="graphic" class="col-sm-3 col-lg-3 col-xs-3"></div>


                <div id="tabl" class="col-sm-1 col-lg-2 col-xs-2" style="margin-top: 20px; margin-left: 50px;">
                    <h1><small>Forecast</small>
                    </h1>
                </div>



            </div>

        </div>


        <div style="margin-left: 10px; padding: 10px 20px;">

            <div class="row"; style="margin-left: 10px; background: #000000; padding: 10px 20px 10px; border: 1px solid white">
                <div class="col-sm-2" style="border-right: thick solid #ff0000; margin-top: 100px;">
                    <h2 class="text-white">BILLING</h2>
                </div>
                <div class="col-sm-3 col-lg-3 col-xs-3" id="containernoa" style="cursor: pointer"></div>

                <div class="col-sm-3 col-lg-3 col-xs-3" id="followup"></div>

                <div class="col-sm-3 col-lg-3 col-xs-3" id="invoiced"></div>
            </div>


        </div>


        <div style="margin-left: 10px; padding: 10px 20px;">

            <div class="row"; style="margin-left: 10px; background: #000000; padding: 10px 20px 10px; border: 1px solid white">
                <div class="col-sm-2" style="border-right: thick solid #ff0000; margin-top: 100px;">
                    <h2 class="text-white">CONTRACTS</h2>
                </div>
                <div class="col-sm-3 col-lg-3 col-xs-3" id="contractsrewals"></div>

                <div class="col-sm-3 col-lg-3 col-xs-3" id="pendingrenewals"></div>

                
            </div>


        </div>

        <div class="container"; style="margin-left: 20px;">


        </div>

        <div id="modal"></div>

        <!-- Modal -->
        <div class="modal fade" id="myModal" role="dialog">
            <div class="modal-dialog">

                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">View Grid</h4>
                    </div>
                    <div class="modal-body">
                        <div style ="padding-left: 120px;">
                        <button type="button" class="btn btn-success" onclick="location.href = '@Url.Action("ViewGrid", "Forecast")'">Forecast</button>
                        <button type="button" class="btn btn-success" onclick="location.href = '@Url.Action("ViewGridData", "ContractRenewals")'">Contract Renewals</button>
                            <button type="button" class="btn btn-success" onclick="location.href = '@Url.Action("ViewGrid", "Invoiced")'">Invoiced</button>
                            </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>
